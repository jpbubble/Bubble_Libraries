// License Information:
// BubbleSave.nil
// Bubble
// version: 19.11.16
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

// Bubble Save Class Glue script

group BubSave

	get string WorkDir
		return Bubble_Save.WorkDir;
	end
	
	set string WorkDir
		Bubble_Save.WorkDir = value;
	end
	
	get string LastError
		return Bubble_Save.LastError;
	end
	
	bool Exists(string file)
		return Bubble_Save:Exists(file)
	end
	
	bool SaveString(string str,string file,dontcrash)
		return Bubble_Save:SaveString(str,file,dontcrash==true)
	end
	
	string LoadString(string file,dontcrash)
		return Bubble_Save:LoadString(file,dontcrash==true)
	end
	
	table LoadLines(string file,dontcrash)
		string script
		//CSay("Test-PRE")
		script = Bubble_Save:LoadLines(file, dontcrash==true)
		//CSay("Test-POST")
		#pure
		local result = assert( (loadstring or load)(script))
		return result()
		#endpure
	end
	
	bool SaveXtra(string XModule)
		return Bubble_Save:SaveXtraLoaded(XModule)
	end
	
	bool LoadXtra(string XModule)
		return Bubble_Save:LoadXtraLoaded(XModule)
	end

	table StartJCRSave(string argfile)
		table jcrxtra
		table jcrmap
		table jcrfake
		table jcrmeta
		table jcrpure
		string file		
		bool hashed = true
		bool serial
		file = argfile	
		jcrmeta["__newindex"] = void(tb,string key, value)
			if key=="" then 
				return 
			end
			if value==SuperGlobal and type(SuperGlobal)=="table" and getmetatable(value) and Bubble_SuperGlobal
				jcrmap[key] = "--#SuperGlobal#--\n"..Bubble_SuperGlobal:Serialize()
				return
			end
			if key:upper()=="XTRA"
				assert(type(value)=="table" and value.CMD and value.PARA,"XTRA requires a table with the fields CMD and PARA")
				jcrxtra[value.CMD]=value.PARA
				return
			end
			if key:upper()=="HASH" or key:upper()=="HASHED"
				hashed = value!=nil and value!=false
				return
			end
			if key:upper()=="BUBBLEID" or key:upper()=="PURE"
				error(key.." is reserved")
			end
			if key:upper()=="CLOSE"
				Bubble_Save:JCRStartSave()
				jcrmap.PURE = NIL.LuaSerialize("local pure",jcrpure).."\n\nreturn pure"
				for k,v in pairs(jcrmap)
					Bubble_Save:JCRSave(k,v)
				end
				for k,v in pairs(jcrxtra)
					Bubble_Save:JCRSaveXtra(k,v)
				end
				Bubble_Save:JCREndSave(file,hashed)
				return
			end
			if key:upper()=="SERIAL"
				serial = value!=nil and value!=false;
				return
			end
			if serial
				jcrmap[key]=NIL.LuaSerialize("local saved_"..key,value).."\nreturn saved_"..key
				jcrpure[key:upper()]=false
			else
				// Should ONLY be used on alternate scripts
				jcrmap[key]=value
				jcrpure[key:upper()]=true
			end
			
		end
		jcrmeta["__index"] = void(tb,key)
			error("This object is write-only!")
		end
		setmetatable(jcrfake,jcrmeta)
		return jcrfake
	end
	
	table LoadFromJCR(string argfile, mustbehashed, XTRA)
		table jcrmap
		table jcrfake
		table jcrmeta
		table jcrpure
		
		
		jcrmeta["__index"] = var(tb,string key)
			key = key:upper()
			assert(jcrmap[key],"Savegame has no entry "..key.."\n\n"..NIL.LuaSerialize("JCR entries",jcrmap))
			if jcrpure[key] then
				return jcrmap[key]
			end			
			delegate f
			#pure
			f = assert((loadstring or load)(jcrmap[key]),argfile.."::"..key)
			#endpure
			return f()
		end
		
		jcrmeta["__newindex"] = void()
			error("Load table is read-only")
		end
		
		bool prefixed(s,p)
			return s:sub(1,#p)==p
		end
		
		Bubble_Save:JCRStartLoad(argfile,mustbehashed==true)
		if type(XTRA)=="table"			
			for i,ixtra in ipairs(XTRA)
				with ixtra
					bool success
					assert($CMD,string.format("Instruction #%d does not have a CMD field!",i))
					assert(Bubble_Save:LoadXtraLoaded($CMD),string.format("Instruction #%d wants to use XLoad module '%s', which is not present!",i,$CMD))
					success = Bubble_Save:JCRXLoad($CMD,$PARA or "")
					if not $MAYFAIL
						if not success then 
							Bubble_Save:JCRLoadClose();
							return nil ;
						end
					end
				end
			end
		end		
		#pure
		do
		  local getpure = Bubble_Save:JCRGetPure()
		  jcrpure = (loadstring or load)(getpure)()
		end
		#endpure  
		repeat
			var k
			string v
			k = Bubble_Save:JCRLoadNext()
			if k=="" then 
				break 
			end
			v = Bubble_Save:JCRLoadGet(k);
			if prefixed(v,"--#SuperGlobal#--\n") then
				#pure
				(loadstring or load)(v)()
				#endpure
			else
				jcrmap[k] = Bubble_Save:JCRLoadGet(k);
			end
		forever
		Bubble_Save:JCRLoadClose();
		
		setmetatable(jcrfake,jcrmeta)
		//jcrpure = jcrfake.PURE
		return jcrfake
	end
end

// Old code...
// "group" was not implemented in NIL when the first version of this
// script was written (not to mention that .NEW() is deprecated by now too!
//#accept BubSave
//#pure
//BubSave = ClassBubSave.NEW()
//#endpure





